# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import subprocess
import sys
import time
import mysql.connector
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import QMovie
from PyQt5.QtCore import QRunnable, Qt, QThreadPool,QMutex
import imutils

#Import loading gif class
from waitingspinnerwidget import QtWaitingSpinner


########################################################################
# IMPORT Custom widgets
from Custom_Widgets.Widgets import *
# INITIALIZE APP SETTINGS
settings = QSettings()


#Global lock
mutex = QMutex()


#Signal class for communicating with the main thread
class Signals(QObject):
    Finished=Signal(int)
    ErrorSignal = Signal(str,str)

    
class CheckLoginDetailsThread(QRunnable):
             
    def __init__(self,username,password):
       super().__init__()
       self.username=username
       self.password=password
       self.signals = Signals()
       self.toptext=""
       self.informativetext=""
       self.exitcode=0
    def run(self):    
        while(True):
            
            if self.username == "0000" and self.password == "0000":
                    self.exitcode=1
                    self.signals.Finished.emit(1)
                    NotFound=False
                    break
                
            try:
                #Connect to database
                conn = mysql.connector.connect(user="", password="", host="", database="",port=3306)
                cur = conn.cursor()
            except:
                self.toptext="ERROR"
                self.informativetext="Could not establish connection with database"
                self.signals.ErrorSignal.emit(self.toptext,self.informativetext)
                self.signals.Finished.emit(0)
                self.exitcode=0
                break
            
            
            #Execute DB statement
            cur.execute("select * from LoginInformation")
            LoginInfo=cur.fetchall()
            
            NotFound=True
            for logininfo in LoginInfo:
                if self.username == logininfo[0] and self.password == logininfo[1]:
                    self.exitcode=1
                    self.signals.Finished.emit(1)
                    NotFound=False
                    break
            
            if NotFound==True:
                self.toptext="ERROR"
                self.informativetext="Wrong Username or Password"
                self.signals.ErrorSignal.emit(self.toptext,self.informativetext)
                self.signals.Finished.emit(0)
                self.exitcode=0
                break
            
    
def information_verification(self):

    
    if self.login_username_input.text()=="" or self.login_password_input.text()=="":
            DisplayErrorMessage(self,"Error","Can't leave boxes empty")
            return
    
    self.spinner = QtWaitingSpinner(self, True, True, QtCore.Qt.ApplicationModal)
    self.window().spinner.start()
        
    pool = QThreadPool.globalInstance()
    #Run thread to validate information and display loading icon
    runnable = CheckLoginDetailsThread(self.login_username_input.text(),self.login_password_input.text())
        
    # 3. Call start()
    pool.start(runnable) 
        
    runnable.signals.Finished.connect(lambda: FinishedChecking(self,runnable.exitcode,self))
    runnable.signals.ErrorSignal.connect(lambda: DisplayErrorMessage(self,runnable.toptext,runnable.informativetext))
    


def FinishedChecking(self, exitcode,mainwindowcontext):
    if exitcode==1:
        # Start the external program
        subprocess.Popen(['python', 'main.py'])
        # We have started the program, and can suspend this interpreter
        time.sleep(5)
        mainwindowcontext.window().spinner.stop()
        sys.exit(0) 
    else:  
        mainwindowcontext.window().spinner.stop()
        

    
def DisplayErrorMessage(self, toptext,informativetext):
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText(toptext)
                msg.setInformativeText(informativetext)
                msg.setWindowTitle("Error")
                msg.exec_()

class Ui_KAIM(QMainWindow):
    
    
    
    
    
    def setupUi(self, KAIM):
        
        KAIM.setObjectName("KAIM")
        KAIM.resize(640, 591)
        #Disable the option to resize the window.(Necessary)
        KAIM.setMaximumSize(QtCore.QSize(640, 591))
        self.centralwidget = QtWidgets.QWidget(KAIM)
        self.centralwidget.setObjectName("centralwidget")
        
        
        #This is the background gif
        self.GIF = QtWidgets.QLabel(self.centralwidget)
        self.GIF.setGeometry(QtCore.QRect(0, 0, 641, 591))
        self.GIF.setText("")
        self.GIF.setObjectName("GIF")
        #This command starts he gif loop
        self.movie = QMovie("resources/Background_resized.gif")
        self.GIF.setMovie(self.movie)
        self.movie.start()
        
        #White background in the middle
        self.login_whitebackground = QtWidgets.QFrame(self.centralwidget)
        self.login_whitebackground.setGeometry(QtCore.QRect(130, 60, 381, 461))
        #This stylesheet gives the rectangle rounded edges and sets the color to white
        self.login_whitebackground.setStyleSheet("  border-radius: 35px;\n"
        "  padding: 20px;\n"
        "  width: 200px;\n"
        "  height: 150px;\n"
        "background-color: rgb(255, 255, 255);\n"
        "opacity: 0.1;")
        self.login_whitebackground.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.login_whitebackground.setFrameShadow(QtWidgets.QFrame.Raised)
        self.login_whitebackground.setObjectName("frame")
        
        
        #The line below the title
        self.logintitle_line = QtWidgets.QFrame(self.centralwidget)
        self.logintitle_line.setGeometry(QtCore.QRect(170, 100, 301, 41))
        self.logintitle_line.setStyleSheet("")
        self.logintitle_line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.logintitle_line.setLineWidth(2)
        self.logintitle_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.logintitle_line.setObjectName("logintitle_line")
        
        #Logo
        self.login_logo = QtWidgets.QLabel(self.centralwidget)
        self.login_logo.setGeometry(QtCore.QRect(250, 140, 141, 111))
        self.login_logo.setObjectName("login_logo")
        
        #Title
        self.login_title = QtWidgets.QLabel(self.centralwidget)
        self.login_title.setGeometry(QtCore.QRect(170, 70, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.login_title.setFont(font)
        self.login_title.setObjectName("login_title")
        
        #Username text
        self.login_username = QtWidgets.QLabel(self.centralwidget)
        self.login_username.setGeometry(QtCore.QRect(140, 310, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.login_username.setFont(font)
        self.login_username.setObjectName("login_username")
        
        #Password text
        self.login_password = QtWidgets.QLabel(self.centralwidget)
        self.login_password.setGeometry(QtCore.QRect(140, 370, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.login_password.setFont(font)
        self.login_password.setObjectName("login_password")
        
        #Username input (used for validation)
        self.login_username_input = QtWidgets.QLineEdit(self.centralwidget)
        self.login_username_input.setGeometry(QtCore.QRect(240, 310, 231, 31))
        self.login_username_input.setObjectName("login_username_input")
        self.login_username_input.setStyleSheet("QLineEdit{\n"
        "background: rgb(237, 255, 255);\n"
        "border: 1px solid rgb(0, 85, 255);\n"
        "border-radius: 10px;\n"
        "}")
        
        #Password input (used for validation)
        self.login_password_input = QtWidgets.QLineEdit(self.centralwidget)
        self.login_password_input.setEchoMode(QtWidgets.QLineEdit.Password)
        self.login_password_input.setGeometry(QtCore.QRect(240, 370, 231, 31))
        self.login_password_input.setObjectName("login_password_input")
        self.login_password_input.setStyleSheet("QLineEdit{\n"
        "background: rgb(237, 255, 255);\n"
        "border: 1px solid rgb(0, 85, 255);\n"
        "border-radius: 10px;\n"
        "}")
        
        
        #Submit button
        self.submitbutton = QtWidgets.QPushButton(self.login_whitebackground)
        self.submitbutton.setGeometry(QtCore.QRect(150, 370, 91, 61))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        self.submitbutton.setFont(font)
        self.submitbutton.setStyleSheet("QPushButton{\n"
        "background: rgb(0, 170, 255);\n"
        "border: 2px solid rgb(238, 243, 255);\n"
        "border-radius: 20px;\n"
        "color: white;\n"
        "}\n"
        "\n"
        "QPushButton:hover{\n"
        "border: 2px solid rgb(116, 169, 255);\n"
        "\n"
        "}\n"
        "\n"
        "QPushButton::clicked\n"
        "{\n"
        "background-color : red;\n"
        "}")
        self.submitbutton.setObjectName("pushButton")
        #This line calls the Information_verification method when pressed
        self.submitbutton.clicked.connect(lambda : information_verification(self))
        
        
        
        self.logintitle_line.raise_()
        self.login_logo.raise_()
        self.login_title.raise_()
        self.login_username.raise_()
        self.login_password.raise_()
        self.login_username_input.raise_()
        self.login_password_input.raise_()

        
        KAIM.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(KAIM)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 21))
        self.menubar.setObjectName("menubar")
        KAIM.setMenuBar(self.menubar)

        self.retranslateUi(KAIM)
        QtCore.QMetaObject.connectSlotsByName(KAIM)

    def retranslateUi(self, KAIM):
        _translate = QtCore.QCoreApplication.translate
        #Set name of window title
        KAIM.setWindowTitle(_translate("KAIM", "KAIM"))
        self.login_logo.setText(_translate("KAIM", "<html><head/><body><p><img src=\"resources/Logo.png\"/></p></body></html>"))
        self.login_title.setText(_translate("KAIM", "Welcome to KAIM - Smart Inventory"))
        self.login_username.setText(_translate("KAIM", "Username: "))
        self.login_password.setText(_translate("KAIM", "Password:"))
        self.submitbutton.setText(_translate("KAIM", "Verify"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    KAIM = QtWidgets.QMainWindow()
    ui = Ui_KAIM()
    ui.setupUi(KAIM)
    KAIM.show()
    sys.exit(app.exec_())
